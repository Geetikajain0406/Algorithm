#include <iostream>
using namespace std;

#define N 5

int graph[N][N] = {
    {0, 1, 0, 1, 0},
    {1, 0, 1, 1, 1},
    {0, 1, 0, 0, 1},
    {1, 1, 0, 0, 1},
    {0, 1, 1, 1, 0}
};

int path[N+1];    // stores the cycle path
int visited[N];   // mark visited vertices

void printCycle(int path[], int n) {
    cout << "Hamiltonian Cycle: ";
    for (int i = 0; i <= n; i++)
        cout << path[i] << " ";
    cout << endl;
}

void hamCycleUtil(int pos, int n, int start) {
    // base case: all vertices are included
    if (pos == n) {
        if (graph[path[pos-1]][start]) {
            path[pos] = start; // close the cycle
            printCycle(path, n);
        }
        return;
    }

    // try all next vertices
    for (int v = 1; v < n; v++) {
        if (!visited[v] && graph[path[pos-1]][v]) {
            visited[v] = 1;
            path[pos] = v;
            hamCycleUtil(pos + 1, n, start);
            visited[v] = 0; // backtrack
        }
    }
}

void findAllHamiltonianCycles(int n) {
    for (int i = 0; i < n; i++)
        visited[i] = 0;

    path[0] = 0;  // start from vertex 0
    visited[0] = 1;

    hamCycleUtil(1, n, 0);
}

int main() {
    findAllHamiltonianCycles(N);
    return 0;
}
