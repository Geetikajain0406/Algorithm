#include <iostream>
#include<algorithm>
using namespace std;
struct edge{
    int u,v,w;
};
int findparent(int parent[],int i){
    if(parent[i]==i)
    return i;
    return parent[i]=findparent(parent, parent[i]);
}
void unionset(int parent[],int u,int v){
    int pu=findparent(parent,u);
    int pv=findparent(parent,v);
    if(pu != pv){
        parent[pv]=pu;
    }
}
int main() {
    int ve=4;
    int e=5;
edge edges[e]={
        {0, 1, 10},
        {0, 2, 6},
        {0, 3, 5},
        {1, 3, 15},
        {2, 3, 4}
    };
sort(edges,edges+e,[](edge a,edge b){
    return a.w < b.w;
});
int parent[ve];
for(int i=0;i<ve;i++){
    parent[i]=i;
}
cout << "Edges in Minimum Spanning Tree:\n";
    int count = 0, i = 0;
    while(count<ve && i<e){
        int u=edges[i].u;
         int v=edges[i].v;
          int w=edges[i].w;
           int pu=findparent(parent,u);
    int pv=findparent(parent,v);
    if(pu != pv){
         cout << u << " - " << v << " : " << w << endl;
         unionset(parent,pu,pv);
         count++;
    }
    i++;
    }
    return 0;
}
