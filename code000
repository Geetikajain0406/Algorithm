#include <iostream>
#include<algorithm>
using namespace std;
#define INF 999999
struct edges{
    int u,v,w;
};
int findparent(int parent[],int i){
    if(parent[i]==i){
        return i;
    }
    return parent[i]=findparent(parent,parent[i]);
}
void unionset(int parent[],int u,int v){
    int pu=findparent(parent,u);
    int pv=findparent(parent,v);
    if(pu != pv){
        parent[pv]=pu;
    }
}
int main() {
    int ve=4;
    int e=5;
  edges edge[e]= {
        {0, 1, 10},
        {0, 2, 6},
        {0, 3, 5},
        {1, 3, 15},
        {2, 3, 4}
    };
sort(edge,edge +e,[](edges a,edges b){
    return a.w<b.w;
});
int parent[ve];
for(int i=0;i<ve;i++){
    parent[i]=i;
}
    int i=0,count =0;
    while(count<ve && i<e){
        int u=edge[i].u;
         int v=edge[i].v;
          int w=edge[i].w;
     int pu=findparent(parent,u);
    int pv=findparent(parent,v);
    if(pu!=pv){
        cout << u << " - " << v << "  (" << w << ")\n";
        unionset(parent,pu,pv);
        count++;
    }
    i++;
    }
    return 0;
}
