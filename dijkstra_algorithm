#include <iostream>
#include<algorithm>
using namespace std;
#define INF 9999
#define V 5
int main() {
int graph[V][V] = {
        {0, 9, 6, 0, 0},
        {9, 0, 3, 5, 0},
        {6, 3, 0, 4, 2},
        {0, 5, 4, 0, 7},
        {0, 0, 2, 7, 0}
    };
int dist[V];
int visited[V];
int start =0;
for(int i=0;i<V;i++){
    dist[i]=INF;
    visited[i]=false;
}
dist[start]=0;
for(int count=0;count<V-1;count++){
    int u=-1;
for(int i=0;i<V;i++){
    if(!visited[i]&&(u==-1||dist[i]<dist[u]))
        u=i;
    }
    visited[u]=true;
    for(int v=0;v<V;v++){
        if(graph[u][v]&&!visited[v]&&dist[u]+graph[u][v]<dist[v]){
            dist[v]=dist[u]+graph[u][v];
        }
    }
}

  cout << "Shortest distances from source vertex " << start << ":\n";
    for (int i = 0; i < V; i++)
        cout << "To vertex " << i << " = " << dist[i] << endl;
  return 0;
}
