ANS 1
#include<iostream>
using namespace std;
#define n 4
int mat[n][n];
bool issafe(int row,int col){
for(int i=0;i<row;i++){
    if(mat[i][col]){}
    return false;
}
for(int i=row,j=col;i>=0 && j>=0;i--,j--){
    if(mat[i][j]){
        return false;
    }
}
for(int i=row,j=col;i>=0 && j<n;i--,j--){
    if(mat[i][j]){
        return false;
    }
}
return true;
}
bool check(int row,int col){
return (row>=0 && col>=0 && row<n; && col<n && chess[row][col]==1);
        }
bool enter(int row,int col){
if(row==n-1 && col== n-1}{
   mat[row][col]=1;
   return true;
   }
   if(check(row,col)){
     mat[row][col]=1;
   
   if(check(row,col+1)){
    return true;
   }
   mat[row][col]=0;
   return false;
   }
bool matrix(int row){
if(row==n){
    return true;
}
 for(int col=0;col<n;col++){
    if(issafe(row,col)){
        mat[row][col]=1;
    }
    if(matrix(row+1)){
        return true;
    }
    mat[row][col]=0;
 }  
 return false; 
}
   
int main(){
return 0;}


ANS 2
#include<iostream>
using namespace std;


int triplet(int arr[],int n){
    int subset=0;
    int sub[n];
for(int i=0,j=i+1;i<=n-2 && j<=n-1;i++,j++){
    for(int k=j+1;k<=n;k++){
        if(arr[j]-arr[i]==arr[k]-arr[j]){
            subset+=1;
            s
        }
    }
}
 return subset;
}
int main(){
    int n=5;
int arr[n]={1,3,5,7,9};
   cout<<"the number of subset can be made are: "<<triplet(arr,n);

return 0;}
